 /* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

function getJSession() {
    // XMLHttpRequest setup code
    var xmlRequest = new XMLHttpRequest();
    xmlRequest.onload = function () {
        if (xmlRequest.status == 200) {
            // Parse and interpret results
            // XML results found in xmlRequest.responseXML
            // Text results found in xmlRequest.responseText
            var reg = /content='0; URL=(.*?)'/;
            var matches = reg.exec(xmlRequest.responseText);
            var url = RegExp.$1;
            RegExp.lastIndex = 0;
            console.log("got url");
            getLoginPage(url);
        }
        else {
            alert("Error fetching data: HTTP status " + xmlRequest.status);
        }
    };	// The function to call when the feed is loaded; currently calls the XMLHttpRequest load snippet
    xmlRequest.open("GET", "https://banking.dkb.de/dkb/-");
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    xmlRequest.send();
}
function getLoginPage(url) {
// XMLHttpRequest setup code
    var xmlRequest = new XMLHttpRequest();
    xmlRequest.onload = function () {
        if (xmlRequest.status == 200) {
            // get form url
            var reg = /form action="(.*?)"/;
            var matches = reg.exec(xmlRequest.responseText);
            //alert("URL: " + RegExp.$1);
            //var url = RegExp.$1;
            
            // get token
            reg = /name="token" value="(.*?)"/;
            matches = reg.exec(xmlRequest.responseText);
            //alert("Token: " + RegExp.$1);
            var token = RegExp.$1;
            console.log("got token");
            getAccountData(url, token, document.getElementById("login").value, document.getElementById("pin").value);
        }
        else {
            alert("Error fetching data: HTTP status " + xmlRequest.status);
        }
    };	// The function to call when the feed is loaded; currently calls the XMLHttpRequest load snippet
    xmlRequest.open("GET", url);
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    xmlRequest.send();
}
function getAccountData(url, token, user, passwd) {
// XMLHttpRequest setup code
    var xmlRequest = new XMLHttpRequest();
    xmlRequest.onload = function () {
        if (xmlRequest.status == 200) {
            // get form url
//            alert(xmlRequest.responseText);
            var site = xmlRequest.responseText;
            doLogout(jsession);
            
            var failReg = /Die eingegebene PIN muss genau f&uuml;nf Stellen lang sein/;
            var failReg2 = /Der eingegebene Anmeldename und\/oder die PIN ist nicht zul&auml;ssig./;
            if (site.match(failReg) || site.match(failReg2)) {
                console.log("login failed!");
            } else {
                console.log("logged in");
                parseSite(site);
            }
        }
        else {
            alert("Error fetching data: HTTP status " + xmlRequest.status);
        }
    };	// The function to call when the feed is loaded; currently calls the XMLHttpRequest load snippet
    var params = "%24%24event_login.x=0&%24%24event_login.y=0&token=" + token + "&j_username=" + user + "&j_password=" + passwd + "&%24part=Welcome.login&%24%24%24event_login=login";
    xmlRequest.open("POST", "https://banking.dkb.de/dkb/-");
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    xmlRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlRequest.setRequestHeader("Content-length", params.length);
    
    // extract jsession
    reg = /jsessionid=(.*?)\?/;
    matches = reg.exec(url);
    var jsession = RegExp.$1;
    console.log("jsession: " + jsession);
    
    xmlRequest.setRequestHeader("Cookie", "JSESSIONID=" + jsession);
    xmlRequest.setRequestHeader("Connection", "close");
    xmlRequest.send(params);
}
function doLogout(jsession) {
// XMLHttpRequest setup code
    var xmlRequest = new XMLHttpRequest();
    xmlRequest.onload = function () {
        if (xmlRequest.status == 200) {
            // get form url
//            alert(xmlRequest.responseText);
            var goodReg = /.*?content='0; URL=https:\/\/banking\.dkb\.de\/dkb\/\-\?\$part=Welcome\.logout&\$javascript=disabled'.*/;
            if (!xmlRequest.responseText.match(goodReg)) {
                console.log("logout failed!");
            } else {
                console.log("logged out");
                hideIndicator();
                showBack(null);
            }
        }
        else {
            alert("Error fetching data: HTTP status " + xmlRequest.status);
        }
    };	// The function to call when the feed is loaded; currently calls the XMLHttpRequest load snippet
    var params = '$$event_logout.x=56&$$event_logout.y=18&$part=DkbTransactionBanking.login-status';
    xmlRequest.open("POST", "https://banking.dkb.de/dkb/-");
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    xmlRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlRequest.setRequestHeader("Content-length", params.length);
    xmlRequest.setRequestHeader("Cookie", "JSESSIONID=" + jsession);
    xmlRequest.setRequestHeader("Connection", "close");
    xmlRequest.send(params);
}
function parseSite(code) {
    code = code.replace(/\n/g, '');
    var parseReg = /<tr class="(?:even)?(?:odd)?-row">.*?<td.*?accountNo">\s*(.*?)\s*<\/td>.*?<td.*?name">\s*(.*?)<br\/>.*?<td.*?saldo">.*?<span.*?>(.*?) (.*?)<\/span>.*?<\/tr>/gm;
    var data = new Array();
    while ((match = parseReg.exec(code)) != null) {
        var line = new Array(RegExp.$1, RegExp.$2, RegExp.$3, RegExp.$4);
        data.push(line);
        
        alert(line[0] + " " + line[1] + " " + line[2] + " " + line[3]);
    }
}

function getData(event) {
    showIndicator();

    getJSession();
}

function showIndicator() {
    document.getElementById("indicator").style.visibility = 'visible';
}
function hideIndicator() {
    document.getElementById("indicator").style.visibility = 'hidden';
}


//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function X(event)
{
    // Insert Code Here
}
