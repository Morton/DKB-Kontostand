 /* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();

    storedLoginName = widget.preferenceForKey(widget.identifier + "-loginName");
    if (storedLoginName != undefined) {
        document.getElementById('login').value = storedLoginName;
        docuemnt.getElementByid('pin').focus();
    }
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    if (dkb != undefined) {
        dkb.doLogout();
        dkb = undefined;
    }
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    remove();
}
function show() {}
function sync() {}

function showIndicator() {
    document.getElementById("activityIndicator").style.visibility = 'visible';
    document.getElementById("login").style.visibility = 'hidden';
    document.getElementById("pin").style.visibility = 'hidden';
    document.getElementById("submit").style.visibility = 'hidden';
}
function hideIndicator() {
    document.getElementById("activityIndicator").style.visibility = 'hidden';
    document.getElementById("login").style.visibility = 'visible';
    document.getElementById("pin").style.visibility = 'visible';
    document.getElementById("submit").style.visibility = 'visible';
}

// This object implements the dataSource methods for the list.
var account = {
	
	// Sample data for the content of the list. 
	// Your application may also fetch this data remotely via XMLHttpRequest.
	_rowData: [],
    
    setRows: function(arr) {
        this._rowData = arr;
        document.getElementById('list').object.reloadData();

    },
	
	// The List calls this method to find out how many rows should be in the list.
	numberOfRows: function() {
		return this._rowData.length;
	},
	
	// The List calls this method once for every row.
	prepareRow: function(rowElement, rowIndex, templateElements) {
		// templateElements contains references to all elements that have an id in the template row.
		// Ex: set the value of an element with id="label".
        
        templateElements.rowLabel.innerText = this._rowData[rowIndex][1];
        templateElements.rowLabel1.innerText = this._rowData[rowIndex][2];
        if (this._rowData[rowIndex][3] == 'S') {
            templateElements.rowLabel1.style.color = 'Red';
            templateElements.rowLabel1.innerText = '-' + templateElements.rowLabel1.innerText;
        } else {
            templateElements.rowLabel1.style.color = 'White';
        }
        if (rowIndex + 1 == this._rowData.length) {
            templateElements.rowLabel.style.fontWeight = 'Bold';
            templateElements.rowLabel1.style.fontWeight = 'Bold';
        } else {
            templateElements.rowLabel.style.fontWeight = 'Normal';
            templateElements.rowLabel1.style.fontWeight = 'Normal';
        }
	}
};

function onMayEnter(self) {
    if (self.keyIdentifier == "Enter") {
        getData(null);
    }
}
function clearInput(self) {
    self.currentTarget.value = '';
}
function showError(text) {
    document.getElementById('error').innerText = text;
    hideIndicator();
}
function onTransactionCompleted(data) {
    dkb = undefined;
    account.setRows(data);

    showBack(null);
    hideIndicator();
}
var dkb = undefined;
function getData(event) {
    if (document.getElementById("pin").value != '') {
        showError('');
        showIndicator();
        
        var login = document.getElementById("login").value;
        
        if (login != '' && login != 'Kontonummer') {
            widget.setPreferenceForKey(login, widget.identifier + "-loginName");
        }
        
        dkb = new DKBEngine(login, document.getElementById("pin").value, onTransactionCompleted, showError);
        document.getElementById("pin").value = '';
    }
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function onEnter(event)
{
    // Insert Code Here
}
